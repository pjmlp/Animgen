/*
 * FileSelector.java
 * Application window for the generator class.
 * Copyright (C) 2007  Paulo Pinto
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package org.progtools;

import java.awt.Cursor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * The application window.
 * @author  Paulo
 */
public class FileSelector extends javax.swing.JFrame implements PropertyChangeListener  {
    private AnimGIFGenerator generator;
    private DefaultListModel filesToProcess;
    
    /** Creates new form FileSelector */
    public FileSelector() {
        generator = new AnimGIFGenerator(4, 4);
        filesToProcess = new DefaultListModel();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList();
        filesList.setModel(filesToProcess);
        filesList.setTransferHandler(new DropHandler());
        processImgBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        removeSelectionBtn = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Animation Generator");
        jScrollPane1.setViewportView(filesList);

        processImgBtn.setText("Process Images");
        processImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processImgBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        removeSelectionBtn.setText("Remove Selection");
        removeSelectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSelectionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exitBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addComponent(removeSelectionBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processImgBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(processImgBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSelectionBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Removes all the files the user has selected.
     * @param evt Information about the triggered event.
     */
    private void removeSelectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSelectionBtnActionPerformed
        for (int index: filesList.getSelectedIndices()) {
            filesToProcess.remove(index);
        }
    }//GEN-LAST:event_removeSelectionBtnActionPerformed
    
    
    /**
     * Processes the list of available files, generated the animated GIF for each one
     * of them. Assuming they are on the proper format.
     * @param evt Information about the triggered event.
     */
    private void processImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processImgBtnActionPerformed
        // Prepare the interface to give feedback to the user about the
        // progress of the image conversion.
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        progressBar.setMinimum(0);
        progressBar.setMaximum(filesToProcess.size());
        progressBar.setValue(0);
        Enumeration<?> iter = filesToProcess.elements();
        /*while (iter.hasMoreElements()) {
            try {
                generator.generateGIF((String)iter.nextElement());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, e, "Error while processing file", JOptionPane.ERROR_MESSAGE);
            }
        }
        setCursor(null);*/
        BackgroundProcessor task = new BackgroundProcessor(this, progressBar, iter, generator);
        new Thread(task).start();
    }//GEN-LAST:event_processImgBtnActionPerformed
    
    /**
     * Processes the exit button clicked event. Just leaves the applicaton.
     * @param evt Information about the triggered event.
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        dispose();
    }//GEN-LAST:event_exitBtnActionPerformed
    
    /**
     * Application entry point.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
            
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new FileSelector().setVisible(true);
                }
            });
        } catch (Exception e) {
            // Some nasty problem happened, just leave.
            e.printStackTrace();
            System.exit(-1);
        }
    }
    
    /**
     * Called by the background task to notify about the task's progress
     *
     * @param evt The event details.
     */
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitBtn;
    private javax.swing.JList filesList;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processImgBtn;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton removeSelectionBtn;
    // End of variables declaration//GEN-END:variables
    
}
